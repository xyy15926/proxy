"
"----------------------------------------------------------
" Name: vimrc.(or .vimrc, to be exact)
" Author: xyy15926
" Create at:
" Update at:
" Description: personal vim settings, which should be linked
"	from ~/.vimrc(or other files do the same thing), or 
"	just renamed ~/.vimrc
"----------------------------------------------------------

"set runtimepath=/home/xyy15926/.vim/runtime
	" runtimepath will be generated automatically when
	" starting vim
"DISPLAY CONFIG{{{
"
set nocompatible
	"don't compate with older-verioned vim
set ruler
	"show the percentage, rows, columns right on status line
set number
	"show line numbers
"set relativenumber
	"it will be usefule when counting lines
syntax enable
syntax on
	"=`syntax on`
	"turn on/off syntax highlighting
	"`on/enable` - `:source $VIMRUNTIME/syntax/syntax.vim`
	"`off` - `:source $VIMRUNTIME/syntax/nosyntax.vim`
	"`manual` - `:source $VIMRUNTIME/syntax/manual.vim`
"highlight Normal guibg=Black guifg=White
	"highlight `Normal` section

" solarized setting
let g:solarized_termcolors=256
let g:solarized_termtrans=0
let g:solarized_degrade=0
let g:solarized_bold=1
let g:solarized_underline=1
let g:solarized_italic=1
let g:solarized_contrast="high"
let g:solarized_visibility="normal"
set background=dark
	"backgroud color
colorscheme gruvbox
	"so amazing a colorscheme

"hi normal ctermbg=none
	"make terminal vim transparent
	"ctermbg may be the termianl background, set it none will
	"cover any setting about background, so this has to be
	"put after`colorscheme, which may set it too
	"#todo
set foldenable
	"#todo
set foldmethod=indent
	"`indent`: indent lines
	"`marker`: lines between `{{{}}}`
	"`manual`: fold manually
	"`expr`: expression
	"`syntax`：syntax
	"`diff`：unmodified
set foldlevel=99
set tabstop=4
	"how much space a tab display, default 8
set softtabstop=4
	"how much space to be added/deleted when push <tab>/
	"<backspace>. if not integral multiple of `tabstop`,
	"the remainder will be filled with <space> when 
	"noexpandtab
set noexpandtab
	"don't replace <tab> with <space>, set here just in
	"case, for it's default setting
	"if `set expandtab`, <c-v> can be used to insert a
	"real tab
set shiftwidth=4
	"indent length len
set smarttab
	"<tab>/<backspace> will add/delete `shiftwidth` space
	"instead of determined by `softtabstop` and `tabstop`
"the indent setting could be written in file to tell vim
"how to handle the indent with the file like this:
"/*vim:tabstop=4:softtabstop=4:shiftwidth=4:noexpandtab=4:smarttab*/
set autoindent
	"#todo
set smartindent
	"#todo
set showmatch
	"#todo
set list
	"display tab, trail-space, etc(with displayable chars)
"set listchars=tab:»·,trail:-,precedes:?,extends:?,eol:↩︎
set listchars=tab:»⋅,trail:-,precedes:?,extends:?,eol:«
	"set how those chars display
	"tab -> <tab>, trail -> <space> at the end of a line
	"precedes -> left text out of view, extends -> right
	"eol -> end of a line(<enter>)
	"try `:digraphs` to get specialkeys‘ input-key-bonds
	"and their codes, then <c-k> key-bonds to input
	"`⋅`: <.P>
	"`∙`: <Sb>
	"`»`: <>>>
	"`«`: <<<>
	"'‹': <1<>
	"'›': <>1>
	"'∗': <*->
	"
set scrolloff=5
	"position(lines-count) where to begin scrolling off
set wrap
	"auto-wrap when lines is to extend out of view, but 
	"without add eol, just change the way lines display
set laststatus=2
	"alawys display statusline, defaults only when two or
	"more windows in display
set noscrollbind
	"don't scroll the windows simultaneously
"
"}}}

"FUNCTION CONFIG{{{
"
set ignorecase
	"ignorecase default
set smartcase
	"but if expression(while searching, for example) contains
	"uppercase characters, case sensetive
set backspace=indent,eol,start
	"what backspace could delete
set nobackup
	"don't generate backupfile
set backupext=.bak
	"set backupfile's extention name, default `~`
	"it won't work here, just mark
set backupdir=~/.vim/tmp
	"directory to store backup file, default current
	"directory
set noundofile
	"when on, vim will saves undo history to an undo file
	"when a writing a buffer to file, and restore undo
	"history from the same file on buffer read
	"default `.filename.un.~`
set undodir=~/.vim/tmp
	"directory to store undo file, default current directory
set swapfile
	"generate swap file
set updatetime=10000
	"time(ms) interval to write swapfile
set updatecount=400
	"character counts to write swapfile
set directory=~/.vim/tmp
	"the directory to store swap file, default current
	"directory
set fileencodings=utf-8,ucs-bom,gbk10820,gbk,gb2312
	"vim file-reading encodings, vim will try after this
	"sequence when open a new file
set termencoding=utf-8
	"terminal encoding
set encoding=utf-8
	"vim file-processing encoding, including buffer, menu
set fileencoding=utf-8
	"vim file-saving encoding
set textwidth=60
	"break line after 60 chars

filetype plugin indent on
	"switch filetype detection, plugin, indent on
	"`help filetype` if want to know how `filetype` work
	"in fact, `:syntax on` automatically switch filetype
	"detection on
let mapleader=";"
let maplocalleader=","
	"set leader and localleader
"run /path/to/vimscripts
	"other vimscripts needed executed
"
"}}}

"PLUGINS{{{
"
"installation{{{
call plug#begin('~/.vim/bundles')
	"send the path where to store the plugins as param
Plug 'scrooloose/nerdtree'
"Plug 'vim-scripts/taglist.vim'
Plug 'majutsushi/tagbar'
Plug 'vim-airline/vim-airline'
	"cooperate with ctags
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
"Plug 'Yggdroot/indentLine'
Plug 'Raimondi/delimitMate'
Plug 'justinmk/vim-sneak'

"Plug 'Valloric/YouCompleteMe'
"Plug 'tomtom/tlib_vim'
"Plug 'MarcWeber/vim-addon-mw-utils'
"Plug 'garbas/vim-snipmate'
"Plug 'godlygeek/tabular'
"Plug 'plasticboy/vim-markdown'
"Plug 'vim-syntastic/syntastic'
"Plug 'ivanov/vim-ipython'

"for special languages

Plug 'mxw/vim-jsx'
Plug 'pangloss/vim-javascript'
Plug 'othree/html5.vim'
Plug 'othree/xml.vim'
call plug#end()

"nerdtree settings
nnoremap <leader>nt :NERDTreeToggle<cr>
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"
"}}}

"taglist settings{{{
nnoremap <leader>tl :TlistToggle<cr>
nnoremap <leader>tlu :TlistUpdate<cr>
	"update tlist, both new files and new variables
nnoremap <leader>tll :TlistLock<cr>
nnoremap <leader>tllu :TlistUnlock<cr>
nnoremap <leader>tls :TlistSessionSave ~/.vim/tmp/tlist.session<cr>
nnoremap <leader>tlsl :TlistSessionLoad ~/.vim/tmp/tlist.session<cr>
	"disable automatic adding files in vim buffer list to
	"tlist, and unlock
let Tlist_GainFocus_On_ToggleOpen=1
	"moves cursor to the taglist window when open taglist
	"window
let Tlist_Use_Right_Window=1
	"open taglist window at right instead of left
let Tlist_Exit_OnlyWindow=1
	"exit vim when taglist window left only
"let Tlist_Auto_Open=1
	"auto open taglist window
	"`>$>vim +TlistOpen`, function too
let Tlist_Close_On_Select=1
	"close taglst window after selecting an item with `<cr>`
	"or `o`, `p`-pressing will still keep focus in taglist 
	"window
let Tlist_Use_SingleClick=1
	"jump to a tag on a single mouse click, default double-
	"click(not to mention pressing <cr>
"let Tlist_Show_One_File=1
	"display tags for only the current active buffer, all
	"files in the vim buffer list and manually added file
	"by default
let Tlist_File_Fold_Auto_Close=1
	"automatically close the fold for the inactive files/
	"buffers
let Tlist_Auto_Update=0
	"disable automatic processing of files, the tlist will
	"only be updated will `:TlistUpdate` manually
let Tlist_Sort_Type="name"
	"set default sort method "name" for each file, this
	"could be toggled between "name" and "order" by
	"pressing `s` for each file in tlist window
let Tlist_Show_Menu=1
	"display the tags defined in current file in a 
	"drop-down menu of popup menu in GUI vim
let Tlist_WinWidth=30
	"set tlist window width

"}}}

"tagbar settings{{{
nnoremap <leader>tb :TagbarToggle<cr>
let g:tagbar_width=30
"let g:tagbar_ctags_bin='/usr/bin/ctags'
	"locate `ctags`
let g:tagbar_autofocus=1
	"move cursor to tagbar window automatically when open
let g:tagbar_autoclose=1
	"whether tagbar automatically after selecting an
	"item
let g:tagbar_autoshowtag=1
	"open the fold to show tags automatically
let g:tagbar_sort = 0
	"sort tags by the sequence order instead of alphabetical
	"order, which is default
let g:tagbar_type_markdown = {
	\'ctagstype' : 'markdown',
	\'kinds' : [
		\'h:Heading_All',
		\'j:Heading_L2',
		\'k:Heading_L3',
		\'l:Heading_L4',
	\],
	\'sort':0,
\}
	"ctagstype: the lang-type passed to ctags
	"kinds: parsing the token from ctags, match the first
	"	char from the token, and group the content to 
	"	the relavant tag(after the `:`)
	"sort: default sorting method
let g:tagbar_type_rust = {
	\ 'ctagstype' : 'rust',
	\ 'kinds' : [
		\'T:types,type definitions',
		\'f:functions,function definitions',
		\'g:enum,enumeration names',
		\'s:structure names',
		\'m:modules,module names',
		\'c:consts,static constants',
		\'t:traits',
		\'i:impls,trait implementations',
	\]
\}
"}}}

" SnipMate setting {{{
" inoremap <c-j> <Plug>snipMateNextOrTrigger
"}}}

" vim-jsx setting
let g:jsx_ext_required = 0

"}}}
