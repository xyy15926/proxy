python笔记

1.	python基础概念

	a.	关于range、list的边界、index问题

		1.	将range的和list的index视为元素的index而不是分割的index

		2.	将边界视为左闭右开[)的区间（0开始）

		3.	index可以为负数

			a.	但是应当将其对len取模，len+index(<0)
			
			b.	尤切片操作涉及左、右边界，应取模以[0,len-1]中的“标准”index作为左（小）右（大）边界

	b.	小括号问题
	
		1.	python中在大部分数据类型（包括list、tuple）外面套上小括号表示是该元素

		2.	(item,)才是表示只含一个元素的tuple

	c.	函数参数

		1.	func(essential, optional=val_op, *args, **kwargs)

			a.	essential：必须参数，没有默认值所以必须传递参数

			b.	optional：缺省参数，有默认值可以不传参

			c.	*args：不定长参数，参数未命名，传递的参数位于args这个tuple里

			d.	**kwargs：关键字参数，参数名称由传参时命名

			e.	注意

				1.	定义函数时需要要按照以上顺序定义参数

				2.	args、kwargs参数中也可能有“必须”参数

					a.	缺少时，虽然调用不会报错

					b.	但是函数内部会出现”越界“错误

				2.	调用原则

					a.	可选传参放在必须传参之后

					b.	关键字传参放在无关键字传参之后

					b.	无关键字传参按顺序

					c.	关键字传参可无序

				3.	发现一个有趣的问题

					a.	定义全部四种参数

					b.	但是函数里面不使用“kwargs”，使用“**kwargs”

					c.	这时函数可以执行，但是不能使用关键字参数，且”**kwargs“为空

		2.	传参

			a.	python只有一种参数传递方式：传对象引用

				1.	python中一切都是对象

				2.	list、dict这类可更改对象，原值可被更改，相当于传地址

				3.	int、tuple之类的不可更改对象，原值不可更改，相当于传值

			b.	其实可以看作是传“地址（引用）“

				1.	不可更改对象，引用传递后值无法更改，只能创建新对象，而不会影响原对象

				2.	可更改对象，引用传递后可以直接更改，影响到原对象

	d.	python编码问题

		1.	编码问题来源

			a.	python解释器编码：处理

			b.	python代码文件编码：输入

			c.	terminal编码：输入、输出

			d.	操作系统语言设计：显示

		2.	python2默认编码方案是ascii（str类型编码方案）（不更改sys.defualtencoding）

			a.	输入ascii字符集以外的字符时，也认为是ascii编码字节流，并采用码元长度（1B）存储

			b.	采用和ascii编码方案不兼容的其他编码方案存储的文件会因为python2无法“理解”报错

			c.	python2中str类型

				1.	str类型实际上应该看作是“字节串”，str索引是按字节

				2.	具有诡异的decode方法用于解码，将字节流转换为真正的unicode“字符串”

		3.	python3则使用utf-8编码方案

			a.	默认将输入字节流视为utf-8编码字节流

			b.	python3中的str类型

				1.	str类型的逻辑变成真正的”字符串“，虽然每个字符长度可能不同

				2.	具有encode方法，将字符串编码为其他编码方案的字节流（包括自身的utf-8）

				3.	但是python3和2中对于“字节串”（2中就是str，3中是bytes）字节序列化（字符串化）的处理方法不同

					a.	python2中应该是将str直接作为字节流传给系统

					b.	python3则将bytes视为“ascii编码序列”，”解码“后输出（"可打印acsii字符打印，否则使用16进制表示"这样的字符串流）

					c.	因为输出函数也只是个函数，并不是按照内存“输出”

		4.	python解释器和terminal编码方案不同测试#todo

	d.	

2.	python不常用函数

	a.	zip(iterable,...)

		1.	参数：一个或多个iterable类型

		2.	返回值：将iterable参数的各对位元素打包成tuple，返回由这些tuple组成的zip对象（iterable，python2中好像是直接返回list），如果参数长度不一致，以最短为准

		3.	特殊用法

			a.	zip(list[:-1], list[1:])：返回list前后相接的tuple

			b.	zip(*zip_obj)：返回得到zip_obj的iterable参数组成的zip对象（但是全变成了tuple）

3.	python代码技巧

4.	python细节问题

	1.	sys.setdefaultencoding

		a.	sys模块中并没有这个方法

		b.	py2中因为这个方式是为site模块准备的，调用之后从sys模块空间摸除
			需要reload(sys)才能调用

		c.	py3中好像移除了
