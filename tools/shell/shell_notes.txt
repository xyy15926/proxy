关于shell（bash）的一些问题

1.	用户配置文件的执行顺序、情况

	a.	先执行系统级（对所有用户设置）的配置文件/etc/profile，然后执行
		用户级的配置文件即/home/user目录下的文件

		1.	/etc/profile：所有用户登陆时都会执行一次，并从
			/etc/profile.d目录的配置文件中收集配置信息

		2.	/etc/bashrc：所有用户打开bash shell执行

		3.	~/.bash_profile(.profile,.bash_login)：仅当前用户登陆时执行
			一次，并且一般会在其中调用~/.bashrc

		4.	~/.bashrc：每次打开bash shell都会执行，而且里面会调用
			/etc/bashrc（不是很理解为啥，如果是系统级文件先执行）

		5.	~/.bash_logout：退出bash shell时执行

	b.	即用户登陆的实际执行顺序：
	
		1.	/etc/profile

		2.	~/.bash_profile->~/.bashrc->/etc/bashrc

	c.	因为.profile中会执行一次.bashrc，所以需要注意命令是应该放在
		.profile中执行，还是.bashrc中执行

		1.	单纯的命令执行，对系统环境无影响根据需要选择，只需要登陆时
			执行应放在.profile中执行

		2.	对系统环境有影响时，因为.profile中执行.bashrc的结果会保留
			下来，所以在图形界面下打开命令行会相当于执行.bashrc命令两次

2.	可执行文件的执行方式

	a.	文件名：表示在当前shell执行文件，需要有文件的执行权限

	b.	source/. 文件名：source和.意义一致，表示读取文件内容在shell中，
		然后在shell里执行文件内容，需要读权限

	c.	sh 文件名：表示开启一个新的shell进程，并读取文件内容在新的
		shell中然后执行，同样的需读权限

	d.	以下面的文件test.sh为例

			#!/bin/bash
			echo "fisrt"
			sleep 1000
			echo "second"
			slepp 1000

		1.	test.sh：产生两个新进程test.sh和sleep，在second输出之前
			<ctrl-c>，会同时终止两个进程，不会继续输出second

		2.	sh test.sh：产生两个新进程，shell和sleep，在second输出之前
			<ctrl-c>，同样的会同时终止两个进程，不会继续输出second
			（实际上first是在新的shell里输出的）

		3.	source/. test.sh：产生一个新进程sleep，在second输出之前
			<ctrl-c>，只有sleep进程被终止，而test.sh的内容在当前shell
			里直接执行，当前shell没有被终止，second会继续输出

	e.	结论

		1.	如果需要对当前shell进行设置，应该使用source/.

		2.	否则这三种执行方式除了进程产生、权限要求应该没有差别

3.	shell命令常识

	a.	感觉上所有涉及到文件“输入”、“输出”的命令，一般都是将“目标输出”
		放在“输入”前，如：zip，ln

	b.	设置环境变量直接
		ENV_NAME = value

	c.	标准输出和标准错误虽然都是在命令行上显示，但是两个是不同的流。
		输出重定向“>”只能将标准输出重定向，不会将标准错误重定向，其
		仍然会在命令行显示
