rust变量、值相关的特性

a.	变量默认不可变

	1.	变量、值

		a.	变量：用来代表值进行操作、没有对应内存空间的字符串，如：a，b

		b.	值：在内存中有对应的空间，如：5，"asdf"

	2.	不可变的含义

		a.	var变量绑定的**值1**不能更改

			1.	**值1**不能更改是指其对应的内存数据不能改变

			2.	若其中包含（或就是）引用，引用值是可以更改的

				a.	let ref = &mut ori; *ref += 1;

		b.	但是var变量可以绑定为其他的值

			1.	即虽然**值1**不能更改，但是var变量可以绑定其他值
				let var = 2;

			2.	此时虽然**值1**虽然无法被访问、使用，但是离开作用域之
				前不会被丢弃，只是被“隐藏”

	3.	保证不变

		a.	不允许赋值操作

		b.	不允许获取可变引用、所有权转移给可变变量
			（对函数即限制参数类型，类似于默认参数const)

	4.	注意

		a.	rust不允许仅将结构体中部分字段标记为可变
			（语法上也做不到，是否可变是声明时，且字段同时声明）

		b.	rust中变量的声明和绑定可以分开，即使声明不可变变量，
			也可以在声明后进行绑定

			1.	问题
				fn ret_int() -> i32{ 5 }

				// 以下代码可编译，且正确
				let num = &mut ret_int();
				*num += 1;
				// 以下不可
				let num;
				num = &mut ret_int();
				*num += 1;
		

b.	rust是基于表达式的语言

	1.	表达式返回一个值，而语句不返回

	2.	rust中除两种语句外，全是表达式

		a.	let引入绑定

			1.	可变绑定赋值是表达式，返回空tuple

			2.	声明后初始化绑定？#todo

		b.	表达式语句：表达式后跟分号转换为语句

			1.	代码中rust希望语句后跟语句，使用分号分隔表达式，所以
				rust看起来和其他大部分分号结尾语言相似

			2.	"{}"包裹的代码块内

				a.	最后一“句”没有以";"结尾，那么是表达式，且返回该
					表达式的值，整个代码块可以看作是表达式

				b.	否则为语句，没有返回值

				c.	函数同

